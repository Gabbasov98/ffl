let form = document.querySelector(".req-form")
let companyNameField = form.querySelector("input[name='companyName']")
let phoneField = form.querySelector("input[name='phone']")
let nameField = form.querySelector("input[name='name']")
let emailField = form.querySelector("input[name='email']")

IMask(
    phoneField,
    {
        mask: '+{7} 000 000-00-00',
        customPlaceholder: '+7 000 000-00-00',
        lazy: true
    }
)

const validateEmail = (field) => {
    let email = field.value
    const expression = /(?!.*\.{2})^([a-z\d!#$%&'*+\-\/=?^_`{|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+(\.[a-z\d!#$%&'*+\-\/=?^_`{|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+)*|"((([ \t]*\r\n)?[ \t]+)?([\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*(([ \t]*\r\n)?[ \t]+)?")@(([a-z\d\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|[a-z\d\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF][a-z\d\-._~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]*[a-z\d\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])\.)+([a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|[a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF][a-z\d\-._~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]*[a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])\.?$/i

    return expression.test(String(email).toLowerCase())
};

form.addEventListener("submit", function(e) {
    e.preventDefault()
    let companyNameFieldIsCorrect = false
    let nameFieldIsCorrect = false
    let phoneFieldIsCorrect = false
    let emailFieldIsCorrect = false

    if(companyNameField.value !== ""){
        companyNameField.classList.remove("_error")
        companyNameFieldIsCorrect = true
    } else{
        companyNameField.classList.add("_error")
        companyNameFieldIsCorrect = false
    }

    if(nameField.value !== ""){
        nameField.classList.remove("_error")
        nameFieldIsCorrect = true
    } else{
        nameField.classList.add("_error")
        nameFieldIsCorrect = false
    }

    if(validateEmail(emailField)){
        emailField.classList.remove("_error")
        emailFieldIsCorrect = true
    } else{
        emailField.classList.add("_error")
        emailFieldIsCorrect = false
    }

    validatePhoneField(phoneField)


    function validatePhoneField(field) {
        let value = field.value
        let lengthOfPhone = value.replace(/[^+\d]/g, '').length
        if(lengthOfPhone <= 2){
            field.classList.add("_error")
            return false
        } else{
            field.classList.remove("_error")
        }

        if (value.length<12){
            field.classList.add("_error")
            phoneFieldIsCorrect = false
            return false
        } else{
            phoneFieldIsCorrect = true
            field.classList.remove("_error")
        }
        return true
    }

    if(
        companyNameFieldIsCorrect &&
        nameFieldIsCorrect &&
        phoneFieldIsCorrect &&
        emailFieldIsCorrect
    ){

        const formData = {
            companyName: companyNameField.value,
            phone: phoneField.value,
            name: nameField.value,
            email: emailField.value,
        };

        lockForm(this);
        sendData(form,formData)
    }
})




function sendData(form,formData) {
    let url = form.action
    console.log(url)
    fetch(url, {
        method: "POST",
        body: formData,
    }).then(response => response.status)
        .then(status => {
            console.log(status)
            if (status === 200) {
                handleSuccess(form)
            } else {
                handleError(form)
            }
        }).catch(() => handleError(form))
        .finally(() => unlockForm(form));

}

function handleError(form) {

}

function handleSuccess(form) {
    form.classList.add("_success")
}

function lockForm(form) {
    form.querySelectorAll("[type=submit]").forEach(btn => btn.disabled = true);
}

function unlockForm(form) {
    form.querySelectorAll("[type=submit]").forEach(btn => btn.disabled = false);
}

let maps = document.querySelectorAll("[data-cord1]")

ymaps.ready(init);




function init(map){
    maps.forEach(map=> {
        createMap(map)
    })

    function createMap(map){
        let cord = [+map.dataset.cord1, +map.dataset.cord2]

        let myMap = new ymaps.Map(map, {
            center: cord,
            zoom: 16,
            controls: []
        });
        myMap.behaviors.disable('scrollZoom');
        myMap.controls.add('zoomControl');

        let placeMark = new ymaps.Placemark(cord, {},
            {
                iconLayout: 'default#image',
                iconImageHref: "img/mark.svg",
                iconImageSize: [24, 24],
                iconImageOffset: [-12, -12]
            }
        );
        myMap.geoObjects.add(placeMark);
    }
}




window.addEventListener('DOMContentLoaded', () => {
    fix100vh();
    window.addEventListener('resize', () => {
        fix100vh();
    })


})

function fix100vh() {
    let vh = window.innerHeight * 0.01;
    document.documentElement.style.setProperty('--vh', `${vh}px`);
}

//# sourceMappingURL=../sourcemaps/main.min.js.map
